"""
Processador de dados para anÃ¡lise de jogos
"""

from typing import Dict, List, Optional, Tuple
from datetime import datetime
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from database.db_manager import DatabaseManager
from api.api_client import APIFootballClient
from config.config import ANALYSIS_PARAMS, CURRENT_SEASON

class DataProcessor:
    """Processador de dados da API para anÃ¡lise"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.api = APIFootballClient()
    
    def process_fixture_data(self, fixture: Dict) -> Dict:
        """
        Processar dados de um jogo da API para formato interno
        
        Args:
            fixture: Dados do jogo da API
        
        Returns:
            DicionÃ¡rio com dados processados
        """
        fixture_data = fixture.get('fixture', {})
        league_data = fixture.get('league', {})
        teams = fixture.get('teams', {})
        goals = fixture.get('goals', {})
        score = fixture.get('score', {})
        
        # Calcular golos na primeira parte
        halftime = score.get('halftime', {})
        home_ht = halftime.get('home', 0) or 0
        away_ht = halftime.get('away', 0) or 0
        total_first_half = home_ht + away_ht
        
        return {
            'id': fixture_data.get('id'),
            'league_id': league_data.get('id'),
            'season': league_data.get('season'),
            'date': fixture_data.get('date'),
            'home_team_id': teams.get('home', {}).get('id'),
            'away_team_id': teams.get('away', {}).get('id'),
            'home_team_name': teams.get('home', {}).get('name'),
            'away_team_name': teams.get('away', {}).get('name'),
            'status': fixture_data.get('status', {}).get('short'),
            'home_goals_fulltime': goals.get('home'),
            'away_goals_fulltime': goals.get('away'),
            'home_goals_halftime': home_ht,
            'away_goals_halftime': away_ht,
            'home_goals_first_half': home_ht,
            'away_goals_first_half': away_ht,
            'total_goals_first_half': total_first_half
        }
    
    def save_fixture_to_db(self, fixture: Dict):
        """
        Guardar jogo na base de dados
        
        Args:
            fixture: Dados do jogo da API
        """
        processed = self.process_fixture_data(fixture)
        
        # Guardar equipas
        teams = fixture.get('teams', {})
        home_team = teams.get('home', {})
        away_team = teams.get('away', {})
        
        self.db.insert_team(
            home_team.get('id'),
            home_team.get('name'),
            home_team.get('logo')
        )
        
        self.db.insert_team(
            away_team.get('id'),
            away_team.get('name'),
            away_team.get('logo')
        )
        
        # Guardar liga
        league = fixture.get('league', {})
        self.db.insert_league(
            league.get('id'),
            league.get('name'),
            league.get('country'),
            league.get('season')
        )
        
        # Guardar jogo
        self.db.insert_match(processed)
    
    def calculate_team_first_half_stats(self, team_id: int, matches: List[Dict]) -> Dict:
        """
        Calcular estatÃ­sticas de golos na 1Âª parte para uma equipa
        
        Args:
            team_id: ID da equipa
            matches: Lista de jogos
        
        Returns:
            EstatÃ­sticas calculadas
        """
        total_games = len(matches)
        
        if total_games == 0:
            return {
                'games_played': 0,
                'goals_scored_first_half': 0,
                'goals_conceded_first_half': 0,
                'games_with_first_half_goal': 0,
                'first_half_goal_percentage': 0,
                'avg_goals_first_half': 0
            }
        
        goals_scored = 0
        goals_conceded = 0
        games_with_goal = 0
        
        for match in matches:
            is_home = match['home_team_id'] == team_id
            
            if is_home:
                goals_scored += match.get('home_goals_first_half', 0) or 0
                goals_conceded += match.get('away_goals_first_half', 0) or 0
            else:
                goals_scored += match.get('away_goals_first_half', 0) or 0
                goals_conceded += match.get('home_goals_first_half', 0) or 0
            
            # Conta se houve golo na 1Âª parte
            total_fh = match.get('total_goals_first_half', 0) or 0
            if total_fh > 0:
                games_with_goal += 1
        
        return {
            'games_played': total_games,
            'goals_scored_first_half': goals_scored,
            'goals_conceded_first_half': goals_conceded,
            'games_with_first_half_goal': games_with_goal,
            'first_half_goal_percentage': (games_with_goal / total_games) * 100,
            'avg_goals_first_half': goals_scored / total_games,
            'avg_goals_conceded_first_half': goals_conceded / total_games,
            'games_over15_ft': games_over15_ft,
            'over15_ft_percentage': (games_over15_ft / total_games) * 100,
            'avg_goals_ft': total_ft_goals / total_games
        }
    
    def calculate_h2h_stats(self, h2h_matches: List[Dict]) -> Dict:
        """
        Calcular estatÃ­sticas dos confrontos diretos
        
        Args:
            h2h_matches: Lista de jogos entre as duas equipas
        
        Returns:
            EstatÃ­sticas dos confrontos diretos
        """
        total_matches = len(h2h_matches)
        
        if total_matches == 0:
            return {
                'total_matches': 0,
                'matches_with_first_half_goal': 0,
                'first_half_goal_percentage': 0,
                'avg_first_half_goals': 0,
                'total_first_half_goals': 0,
                'matches_over15_ft': 0,
                'over15_ft_percentage': 0,
                'avg_goals_ft': 0
            }
        
        matches_with_goal = 0
        total_goals = 0
        matches_over15_ft = 0
        total_ft_goals = 0
        
        for match in h2h_matches:
            fh_goals = match.get('total_goals_first_half', 0) or 0
            total_goals += fh_goals
            
            if fh_goals > 0:
                matches_with_goal += 1
            
            # Estatísticas Over 1.5 FT
            ft_home = match.get('home_goals_fulltime', 0) or 0
            ft_away = match.get('away_goals_fulltime', 0) or 0
            total_ft = ft_home + ft_away
            total_ft_goals += total_ft
            
            if total_ft >= 2:
                matches_over15_ft += 1
        
        return {
            'total_matches': total_matches,
            'matches_with_first_half_goal': matches_with_goal,
            'first_half_goal_percentage': (matches_with_goal / total_matches) * 100,
            'avg_first_half_goals': total_goals / total_matches,
            'total_first_half_goals': total_goals,
            'matches_over15_ft': matches_over15_ft,
            'over15_ft_percentage': (matches_over15_ft / total_matches) * 100,
            'avg_goals_ft': total_ft_goals / total_matches
        }
    
    def fetch_and_save_team_history(self, team_id: int, league_id: int, 
                                num_games: int = 10) -> List[Dict]:
        """
        Buscar e guardar histÃ³rico de jogos de uma equipa APENAS do campeonato
        
        Args:
            team_id: ID da equipa
            league_id: ID da liga
            num_games: NÃºmero de jogos a buscar
        
        Returns:
            Lista de jogos processados
        """
        print(f"   ðŸ“¥ Buscando Ãºltimos {num_games} jogos da equipa {team_id} no campeonato...")
        
        saved_matches = []
        
        # Buscar das Ãºltimas 3 temporadas para garantir jogos suficientes
        for year in range(CURRENT_SEASON, CURRENT_SEASON - 3, -1):
            if len(saved_matches) >= num_games:
                break
            
            print(f"      Temporada {year}...")
            
            # Buscar todos os jogos da liga nesta temporada
            fixtures = self.api.get_league_fixtures(
                league_id, 
                season=year
            )
            
            # Filtrar apenas jogos desta equipa que estÃ£o finalizados
            team_fixtures = [
                f for f in fixtures 
                if (f.get('teams', {}).get('home', {}).get('id') == team_id or
                    f.get('teams', {}).get('away', {}).get('id') == team_id)
                and f.get('fixture', {}).get('status', {}).get('short') == 'FT'
            ]
            
            # Ordenar por data (mais recente primeiro)
            team_fixtures.sort(
                key=lambda x: x.get('fixture', {}).get('date', ''), 
                reverse=True
            )
            
            for fixture in team_fixtures:
                if len(saved_matches) >= num_games:
                    break
                self.save_fixture_to_db(fixture)
                saved_matches.append(self.process_fixture_data(fixture))
        
        print(f"      âœ… Guardados {len(saved_matches)} jogos do campeonato")
        return saved_matches
    
    def fetch_and_save_h2h(self, team1_id: int, team2_id: int, 
                      years: int = 3, league_id: int = None) -> List[Dict]:
        """
        Buscar e guardar confrontos diretos dos Ãºltimos X anos
        
        Args:
            team1_id: ID da primeira equipa
            team2_id: ID da segunda equipa
            years: NÃºmero de anos a analisar
            league_id: ID da liga para filtrar apenas campeonato interno
        
        Returns:
            Lista de confrontos processados
        """
        print(f"   ðŸ“¥ Buscando confrontos diretos dos Ãºltimos {years} anos...")
        
        fixtures = self.api.get_head_to_head(team1_id, team2_id, years=years, league_id=league_id)
        
        saved_matches = []
        for fixture in fixtures:
            if fixture.get('fixture', {}).get('status', {}).get('short') == 'FT':
                self.save_fixture_to_db(fixture)
                saved_matches.append(self.process_fixture_data(fixture))
        
        return saved_matches
    
    def get_match_analysis_data(self, home_team_id: int, away_team_id: int, 
                               league_id: int) -> Dict:
        """
        Obter todos os dados necessÃ¡rios para anÃ¡lise de um jogo
        
        Args:
            home_team_id: ID da equipa da casa
            away_team_id: ID da equipa visitante
            league_id: ID da liga
        
        Returns:
            DicionÃ¡rio com todos os dados de anÃ¡lise
        """
        print(f"\nðŸ” Recolhendo dados para anÃ¡lise...")
        
        # 1. Confrontos diretos
        h2h_matches = self.db.get_head_to_head(home_team_id, away_team_id, limit=50)
        
        # Se nÃ£o houver dados suficientes na BD, buscar da API
        if len(h2h_matches) == 0:
            print("   âš ï¸ Poucos confrontos diretos na BD, buscando da API...")
            self.fetch_and_save_h2h(home_team_id, away_team_id,
                                years=ANALYSIS_PARAMS['direct_confrontations_years'],
                                league_id=league_id)
            h2h_matches = self.db.get_head_to_head(home_team_id, away_team_id, limit=50)
        
        # 2. Forma recente da equipa da casa (apenas campeonato)
        home_matches = self.db.get_team_recent_matches_by_league(
            home_team_id,
            league_id,
            ANALYSIS_PARAMS['recent_form_games']
        )
        
        if len(home_matches) < ANALYSIS_PARAMS['min_games_for_analysis']:
            print("   âš ï¸ Poucos jogos da equipa da casa na BD, buscando da API...")
            self.fetch_and_save_team_history(home_team_id, league_id, 
                                            ANALYSIS_PARAMS['recent_form_games'])
            home_matches = self.db.get_team_recent_matches_by_league(
                home_team_id,
                league_id,
                ANALYSIS_PARAMS['recent_form_games']
            )
        
        # 3. Forma recente da equipa visitante (apenas campeonato)
        away_matches = self.db.get_team_recent_matches_by_league(
            away_team_id,
            league_id,
            ANALYSIS_PARAMS['recent_form_games']
        )
        
        if len(away_matches) < ANALYSIS_PARAMS['min_games_for_analysis']:
            print("   âš ï¸ Poucos jogos da equipa visitante na BD, buscando da API...")
            self.fetch_and_save_team_history(away_team_id, league_id,
                                            ANALYSIS_PARAMS['recent_form_games'])
            away_matches = self.db.get_team_recent_matches_by_league(
                away_team_id,
                league_id,
                ANALYSIS_PARAMS['recent_form_games']
            )
        
        # Calcular estatÃ­sticas
        h2h_stats = self.calculate_h2h_stats(h2h_matches)
        home_stats = self.calculate_team_first_half_stats(home_team_id, home_matches)
        away_stats = self.calculate_team_first_half_stats(away_team_id, away_matches)
        
        return {
            'h2h': {
                'matches': h2h_matches,
                'stats': h2h_stats
            },
            'home_team': {
                'matches': home_matches,
                'stats': home_stats
            },
            'away_team': {
                'matches': away_matches,
                'stats': away_stats
            }
        }
    
    def calculate_over15_ft_stats(self, matches: List[Dict]) -> Dict:
        """
        Calcular estatísticas de Over 1.5 FT (pelo menos 2 golos no jogo completo)
        
        Args:
            matches: Lista de jogos
        
        Returns:
            Estatísticas de Over 1.5 FT
        """
        if not matches:
            return {
                'total_matches': 0,
                'over15_ft_count': 0,
                'over15_ft_percentage': 0,
                'avg_goals_ft': 0,
                'over25_ft_count': 0,
                'over25_ft_percentage': 0
            }
        
        finished_matches = [m for m in matches if m.get('status') == 'FT']
        total_matches = len(finished_matches)
        
        if total_matches == 0:
            return {
                'total_matches': 0,
                'over15_ft_count': 0,
                'over15_ft_percentage': 0,
                'avg_goals_ft': 0,
                'over25_ft_count': 0,
                'over25_ft_percentage': 0
            }
        
        over15_count = 0
        over25_count = 0
        total_goals = 0
        
        for match in finished_matches:
            ft_home = match.get('home_goals_fulltime', 0) or 0
            ft_away = match.get('away_goals_fulltime', 0) or 0
            total_ft = ft_home + ft_away
            
            total_goals += total_ft
            
            if total_ft >= 2:
                over15_count += 1
            if total_ft >= 3:
                over25_count += 1
        
        return {
            'total_matches': total_matches,
            'over15_ft_count': over15_count,
            'over15_ft_percentage': (over15_count / total_matches) * 100,
            'avg_goals_ft': total_goals / total_matches,
            'over25_ft_count': over25_count,
            'over25_ft_percentage': (over25_count / total_matches) * 100
        }
    
    def calculate_recovery_stats(self, matches: List[Dict], team_id: int = None) -> Dict:
        """
        Calcular estatísticas de recuperação (0-0 HT mas Over 1.5 FT)
        
        Args:
            matches: Lista de jogos
            team_id: ID da equipa (opcional, para análise específica)
        
        Returns:
            Estatísticas de recuperação
        """
        if not matches:
            return {
                'total_matches': 0,
                'no_ht_goal_matches': 0,
                'recovery_to_over15_ft': 0,
                'recovery_percentage': 0,
                'avg_second_half_goals': 0
            }
        
        finished_matches = [m for m in matches if m.get('status') == 'FT']
        total_matches = len(finished_matches)
        
        if total_matches == 0:
            return {
                'total_matches': 0,
                'no_ht_goal_matches': 0,
                'recovery_to_over15_ft': 0,
                'recovery_percentage': 0,
                'avg_second_half_goals': 0
            }
        
        no_ht_goal_matches = 0
        recovery_matches = 0
        total_second_half_goals = 0
        
        for match in finished_matches:
            ht_home = match.get('home_goals_halftime', 0) or 0
            ht_away = match.get('away_goals_halftime', 0) or 0
            ft_home = match.get('home_goals_fulltime', 0) or 0
            ft_away = match.get('away_goals_fulltime', 0) or 0
            
            total_ht = ht_home + ht_away
            total_ft = ft_home + ft_away
            second_half_goals = total_ft - total_ht
            
            total_second_half_goals += second_half_goals
            
            # Jogos sem golo no HT
            if total_ht == 0:
                no_ht_goal_matches += 1
                
                # Recuperação para Over 1.5 FT
                if total_ft >= 2:
                    recovery_matches += 1
        
        recovery_percentage = 0
        if no_ht_goal_matches > 0:
            recovery_percentage = (recovery_matches / no_ht_goal_matches) * 100
        
        return {
            'total_matches': total_matches,
            'no_ht_goal_matches': no_ht_goal_matches,
            'recovery_to_over15_ft': recovery_matches,
            'recovery_percentage': recovery_percentage,
            'avg_second_half_goals': total_second_half_goals / total_matches
        }
    
    def get_match_timeline_visualization(self, match: Dict) -> str:
        """
        Criar visualizaÃ§Ã£o dos golos por intervalos de tempo
        
        Args:
            match: Dados do jogo
        
        Returns:
            String com visualizaÃ§Ã£o formatada
        """
        home_team = match.get('home_team_name', 'Casa')
        away_team = match.get('away_team_name', 'Fora')
        
        home_ht = match.get('home_goals_halftime', 0) or 0
        away_ht = match.get('away_goals_halftime', 0) or 0
        home_ft = match.get('home_goals_fulltime', 0) or 0
        away_ft = match.get('away_goals_fulltime', 0) or 0
        
        # Calcular golos na 2Âª parte
        home_2h = home_ft - home_ht
        away_2h = away_ft - away_ht
        
        viz = f"\n   {'='*60}\n"
        viz += f"   {home_team} vs {away_team}\n"
        viz += f"   {'='*60}\n\n"
        
        # 1Âª Parte (0-45min)
        viz += f"   â±ï¸  1Âª PARTE (0-45')\n"
        viz += f"   ðŸ  {home_team}: {'âš½' * home_ht} ({home_ht})\n"
        viz += f"   âœˆï¸  {away_team}: {'âš½' * away_ht} ({away_ht})\n"
        viz += f"   ðŸ“Š Total: {home_ht + away_ht} golo(s)\n\n"
        
        # 2Âª Parte (46-90min)
        viz += f"   â±ï¸  2Âª PARTE (46-90')\n"
        viz += f"   ðŸ  {home_team}: {'âš½' * home_2h} ({home_2h})\n"
        viz += f"   âœˆï¸  {away_team}: {'âš½' * away_2h} ({away_2h})\n"
        viz += f"   ðŸ“Š Total: {home_2h + away_2h} golo(s)\n\n"
        
        # Resultado Final
        viz += f"   ðŸ RESULTADO FINAL: {home_ft} - {away_ft}\n"
        viz += f"   {'='*60}\n"
        
        return viz

if __name__ == "__main__":
    # Teste do processador
    processor = DataProcessor()
    print("✅ Data Processor inicializado com sucesso!")