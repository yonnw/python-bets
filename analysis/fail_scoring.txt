"""
Sistema de scoring para avaliar probabilidade de golo na 1Âª parte
"""

from typing import Dict, Tuple, List
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.config import SCORING_WEIGHTS, ALERT_THRESHOLDS

class ScoringSystem:
    """Sistema de pontuaÃ§Ã£o para avaliar jogos"""
    
    def __init__(self):
        self.weights = SCORING_WEIGHTS
        self.thresholds = ALERT_THRESHOLDS
    
    def calculate_h2h_score(self, h2h_stats: Dict) -> Tuple[float, str]:
        """
        Calcular score baseado nos confrontos diretos (OVER 0.5 HT)
        
        Args:
            h2h_stats: EstatÃ­sticas dos confrontos diretos
        
        Returns:
            Tuple com (score 0-100, explicaÃ§Ã£o)
        """
        total_matches = h2h_stats.get('total_matches', 0)
        
        if total_matches == 0:
            return 0, "Sem histÃ³rico de confrontos diretos"
        
        # Score = Percentagem de jogos com golo na 1Âª parte (qualquer equipa)
        fh_percentage = h2h_stats.get('first_half_goal_percentage', 0)
        
        score = fh_percentage
        
        # PenalizaÃ§Ã£o se houver poucos jogos
        if total_matches < 3:
            score *= 0.7  # Reduz 30% pela falta de dados
        
        explanation = (
            f"Nos Ãºltimos {total_matches} confrontos: "
            f"{h2h_stats['matches_with_first_half_goal']} jogos com golo na 1Âª parte "
            f"({fh_percentage:.1f}%)"
        )
        
        return round(score, 2), explanation
    
    def calculate_team_form_score(self, team_stats: Dict, is_home: bool = True) -> Tuple[float, str]:
        """
        Calcular score baseado na forma recente (OVER 0.5 HT)
        
        Args:
            team_stats: EstatÃ­sticas da equipa
            is_home: Se Ã© a equipa da casa
        
        Returns:
            Tuple com (score 0-100, explicaÃ§Ã£o)
        """
        games_played = team_stats.get('games_played', 0)
        
        if games_played == 0:
            return 0, "Sem dados de forma recente"
        
        # Score = Percentagem de jogos com golo na 1Âª parte
        fh_percentage = team_stats.get('first_half_goal_percentage', 0)
        
        score = fh_percentage
        
        # PenalizaÃ§Ã£o se houver poucos jogos
        if games_played < 5:
            score *= 0.8
        
        location = "casa" if is_home else "fora"
        explanation = (
            f"Ãšltimos {games_played} jogos: "
            f"{team_stats['games_with_first_half_goal']} com golo na 1Âª parte "
            f"({fh_percentage:.1f}%)"
        )
        
        return round(score, 2), explanation
    
    def calculate_combined_score(self, h2h_score: float, home_form_score: float,
                                away_form_score: float) -> Tuple[float, str, str]:
        """
        Calcular score final combinado
        
        Args:
            h2h_score: Score dos confrontos diretos
            home_form_score: Score da forma da equipa da casa
            away_form_score: Score da forma da equipa visitante
        
        Returns:
            Tuple com (score final 0-100, nÃ­vel de confianÃ§a, recomendaÃ§Ã£o)
        """
        # Score ponderado
        final_score = (
            h2h_score * self.weights['direct_confrontations'] +
            home_form_score * self.weights['home_team_form'] +
            away_form_score * self.weights['away_team_form']
        )
        
        # Determinar nÃ­vel de confianÃ§a
        if final_score >= self.thresholds['high_confidence'] * 100:
            confidence = "ALTA"
            recommendation = "SIM"
        elif final_score >= self.thresholds['medium_confidence'] * 100:
            confidence = "MÃ‰DIA"
            recommendation = "TALVEZ"
        elif final_score >= self.thresholds['low_confidence'] * 100:
            confidence = "BAIXA"
            recommendation = "TALVEZ"
        else:
            confidence = "MUITO BAIXA"
            recommendation = "NÃƒO"
        
        return round(final_score, 2), confidence, recommendation
    
    def analyze_match(self, analysis_data: Dict) -> Dict:
        """
        Analisar um jogo completo e gerar score
        
        Args:
            analysis_data: Dados de anÃ¡lise do jogo
        
        Returns:
            DicionÃ¡rio com anÃ¡lise completa e recomendaÃ§Ã£o
        """
        # Calcular scores individuais
        h2h_score, h2h_explanation = self.calculate_h2h_score(
            analysis_data['h2h']['stats']
        )
        
        home_score, home_explanation = self.calculate_team_form_score(
            analysis_data['home_team']['stats'],
            is_home=True
        )
        
        away_score, away_explanation = self.calculate_team_form_score(
            analysis_data['away_team']['stats'],
            is_home=False
        )
        
        # Score final
        final_score, confidence, recommendation = self.calculate_combined_score(
            h2h_score, home_score, away_score
        )
        
        # Construir explicaÃ§Ã£o completa
        reasoning = self._build_reasoning(
            h2h_explanation, home_explanation, away_explanation,
            h2h_score, home_score, away_score, final_score
        )
        
        return {
            'overall_score': final_score,
            'confidence_level': confidence,
            'recommendation': recommendation,
            'h2h_score': h2h_score,
            'home_form_score': home_score,
            'away_form_score': away_score,
            'reasoning': reasoning,
            'details': {
                'h2h': h2h_explanation,
                'home': home_explanation,
                'away': away_explanation
            }
        }
    
    def _build_reasoning(self, h2h_exp: str, home_exp: str, away_exp: str,
                        h2h_score: float, home_score: float, away_score: float,
                        final_score: float) -> str:
        """Construir explicaÃ§Ã£o detalhada da anÃ¡lise"""
        
        reasoning_parts = [
            f"ðŸ“Š SCORE FINAL: {final_score}/100\n",
            f"\nðŸ¤ CONFRONTOS DIRETOS (Score: {h2h_score}/100 - Peso: {self.weights['direct_confrontations']*100}%)",
            f"{h2h_exp}",
            f"\nðŸ  EQUIPA DA CASA (Score: {home_score}/100 - Peso: {self.weights['home_team_form']*100}%)",
            f"{home_exp}",
            f"\nâœˆï¸ EQUIPA VISITANTE (Score: {away_score}/100 - Peso: {self.weights['away_team_form']*100}%)",
            f"{away_exp}",
        ]
        
        # Adicionar conclusÃ£o
        if final_score >= 75:
            reasoning_parts.append(
                "\nâœ… CONCLUSÃƒO: Forte indicaÃ§Ã£o de que haverÃ¡ golo na 1Âª parte. "
                "Ambas as equipas mostram tendÃªncia consistente de marcar/sofrer cedo."
            )
        elif final_score >= 60:
            reasoning_parts.append(
                "\nâš ï¸ CONCLUSÃƒO: Probabilidade moderada de golo na 1Âª parte. "
                "HÃ¡ indicadores positivos mas tambÃ©m alguma incerteza."
            )
        elif final_score >= 45:
            reasoning_parts.append(
                "\nâš¡ CONCLUSÃƒO: Probabilidade baixa-moderada. "
                "Considerar outros fatores antes de decidir."
            )
        else:
            reasoning_parts.append(
                "\nâŒ CONCLUSÃƒO: Baixa probabilidade de golo na 1Âª parte "
                "com base nos dados histÃ³ricos."
            )
        
        return "\n".join(reasoning_parts)
    
    def format_h2h_visualization(self, h2h_matches: List, 
                                 home_team_name: str, away_team_name: str) -> str:
        """
        Formatar visualizaÃ§Ã£o dos confrontos diretos
        
        Args:
            h2h_matches: Lista de jogos H2H
            home_team_name: Nome da equipa da casa
            away_team_name: Nome da equipa visitante
        
        Returns:
            String formatada com histÃ³rico visual
        """
        if not h2h_matches:
            return "\n   âš ï¸ Sem histÃ³rico de confrontos diretos no campeonato\n"
        
        viz = f"\n   {'='*70}\n"
        viz += f"   ðŸ“Š HISTÃ“RICO DE CONFRONTOS DIRETOS (Ãšltimos 3 anos - Apenas jogos finalizados)\n"
        viz += f"   {'='*70}\n\n"
        
        count = 0
        for match in h2h_matches:
            # FILTRAR APENAS JOGOS FINALIZADOS
            if match.get('status') != 'FT':
                continue
                
            count += 1
            if count > 10:  # Mostrar mÃ¡ximo 10 jogos
                break
            
            date = match.get('date', 'Data desconhecida')
            if isinstance(date, str):
                try:
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                    date = date_obj.strftime('%d/%m/%Y')
                except:
                    pass
            
            home_ht = match.get('home_goals_halftime', 0) or 0
            away_ht = match.get('away_goals_halftime', 0) or 0
            home_ft = match.get('home_goals_fulltime', 0) or 0
            away_ft = match.get('away_goals_fulltime', 0) or 0
            
            home_name = match.get('home_team_name', 'Casa')
            away_name = match.get('away_team_name', 'Fora')
            
            # Indicador de golo na 1Âª parte
            first_half_goal = "ðŸŸ¢" if (home_ht + away_ht) > 0 else "ðŸ”´"
            
            viz += f"   {count}. {date} - {first_half_goal}\n"
            viz += f"      {home_name} {home_ft} - {away_ft} {away_name}\n"
            viz += f"      1Âª Parte: {home_ht}-{away_ht} | 2Âª Parte: {home_ft-home_ht}-{away_ft-away_ht}\n\n"
        
        if count == 0:
            return "\n   âš ï¸ Sem jogos finalizados no histÃ³rico de confrontos diretos\n"
        
        # Calcular estatÃ­sticas apenas de jogos finalizados
        finished_matches = [m for m in h2h_matches if m.get('status') == 'FT']
        total_games = len(finished_matches)
        games_with_fh_goal = sum(1 for m in finished_matches 
                                 if (m.get('home_goals_halftime', 0) or 0) + 
                                    (m.get('away_goals_halftime', 0) or 0) > 0)
        percentage = (games_with_fh_goal / total_games * 100) if total_games > 0 else 0
        
        viz += f"   {'='*70}\n"
        viz += f"   ðŸ“ˆ RESUMO: {games_with_fh_goal}/{total_games} jogos com golo na 1Âª parte ({percentage:.1f}%)\n"
        viz += f"   {'='*70}\n"
        
        return viz
    
    def format_team_form_visualization(self, team_matches: List, team_name: str, 
                                   team_id: int, is_home: bool = True) -> str:
        """
        Formatar visualizaÃ§Ã£o da forma recente de uma equipa
        
        Args:
            team_matches: Lista de jogos da equipa
            team_name: Nome da equipa
            team_id: ID da equipa
            is_home: Se Ã© anÃ¡lise da equipa da casa
        
        Returns:
            String formatada com histÃ³rico visual
        """
        if not team_matches:
            return f"\n   âš ï¸ Sem histÃ³rico de jogos para {team_name}\n"
        
        location_emoji = "ðŸ " if is_home else "âœˆï¸"
        viz = f"\n   {'='*70}\n"
        viz += f"   {location_emoji} FORMA RECENTE - {team_name.upper()} (Ãšltimos 10 jogos finalizados)\n"
        viz += f"   {'='*70}\n\n"
        
        count = 0
        total_fh_goals_scored = 0
        total_fh_goals_conceded = 0
        games_with_fh_goal = 0
        
        for match in team_matches:
            # FILTRAR APENAS JOGOS FINALIZADOS
            if match.get('status') != 'FT':
                continue
                
            count += 1
            if count > 10:  # Mostrar mÃ¡ximo 10 jogos
                break
            
            date = match.get('date', 'Data desconhecida')
            if isinstance(date, str):
                try:
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
                    date = date_obj.strftime('%d/%m/%Y')
                except:
                    pass
            
            # Determinar se jogou em casa ou fora
            is_home_game = match.get('home_team_id') == team_id
            location_marker = "ðŸ " if is_home_game else "âœˆï¸"
            
            home_ht = match.get('home_goals_halftime', 0) or 0
            away_ht = match.get('away_goals_halftime', 0) or 0
            home_ft = match.get('home_goals_fulltime', 0) or 0
            away_ft = match.get('away_goals_fulltime', 0) or 0
            
            home_name = match.get('home_team_name', 'Casa')
            away_name = match.get('away_team_name', 'Fora')
            
            # Calcular golos marcados/sofridos pela equipa na 1Âª parte
            if is_home_game:
                team_fh_goals = home_ht
                opponent_fh_goals = away_ht
            else:
                team_fh_goals = away_ht
                opponent_fh_goals = home_ht
            
            total_fh_goals_scored += team_fh_goals
            total_fh_goals_conceded += opponent_fh_goals
            
            # Indicador de golo na 1Âª parte
            if (home_ht + away_ht) > 0:
                first_half_goal = "ðŸŸ¢"
                games_with_fh_goal += 1
            else:
                first_half_goal = "ðŸ”´"
            
            # Resultado do jogo
            if is_home_game:
                if home_ft > away_ft:
                    result = "âœ… V"
                elif home_ft < away_ft:
                    result = "âŒ D"
                else:
                    result = "âž– E"
            else:
                if away_ft > home_ft:
                    result = "âœ… V"
                elif away_ft < home_ft:
                    result = "âŒ D"
                else:
                    result = "âž– E"
            
            viz += f"   {count}. {date} {location_marker} {first_half_goal} {result}\n"
            viz += f"      {home_name} {home_ft} - {away_ft} {away_name}\n"
            viz += f"      1Âª Parte: {home_ht}-{away_ht} | 2Âª Parte: {home_ft-home_ht}-{away_ft-away_ht}\n"
            
            if is_home_game:
                viz += f"      {team_name}: {team_fh_goals} golo(s) marcado(s) na 1Âª parte\n\n"
            else:
                viz += f"      {team_name}: {team_fh_goals} golo(s) marcado(s) na 1Âª parte\n\n"
        
        if count == 0:
            return f"\n   âš ï¸ Sem jogos finalizados para {team_name}\n"
        
        # Resumo estatÃ­stico
        avg_fh_goals_scored = total_fh_goals_scored / count if count > 0 else 0
        avg_fh_goals_conceded = total_fh_goals_conceded / count if count > 0 else 0
        fh_goal_percentage = (games_with_fh_goal / count * 100) if count > 0 else 0
        
        viz += f"   {'='*70}\n"
        viz += f"   ðŸ“ˆ RESUMO:\n"
        viz += f"   â€¢ {games_with_fh_goal}/{count} jogos com golo na 1Âª parte ({fh_goal_percentage:.1f}%)\n"
        viz += f"   â€¢ MÃ©dia de golos marcados na 1Âª parte: {avg_fh_goals_scored:.2f}\n"
        viz += f"   â€¢ MÃ©dia de golos sofridos na 1Âª parte: {avg_fh_goals_conceded:.2f}\n"
        viz += f"   {'='*70}\n"
        
        return viz

if __name__ == "__main__":
    # Teste do sistema de scoring
    scoring = ScoringSystem()
    
    # Dados de exemplo
    test_data = {
        'h2h': {
            'stats': {
                'total_matches': 5,
                'matches_with_first_half_goal': 4,
                'first_half_goal_percentage': 80,
                'avg_first_half_goals': 1.4
            }
        },
        'home_team': {
            'stats': {
                'games_played': 10,
                'games_with_first_half_goal': 7,
                'first_half_goal_percentage': 70,
                'avg_goals_first_half': 0.9
            }
        },
        'away_team': {
            'stats': {
                'games_played': 10,
                'games_with_first_half_goal': 6,
                'first_half_goal_percentage': 60,
                'avg_goals_first_half': 0.7
            }
        }
    }
    
    result = scoring.analyze_match(test_data)
    print("ðŸ§ª Teste do Sistema de Scoring:\n")
    print(f"Score Final: {result['overall_score']}/100")
    print(f"Confiança: {result['confidence_level']}")
    print(f"Recomendação: {result['recommendation']}")
    print(f"\n{result['reasoning']}")